{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.11.1.770",
      "templateHash": "14973085335342024073"
    }
  },
  "parameters": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "The name of the container app hosting environment"
      }
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "The location of the container app hosting environment"
      }
    },
    "logAnalyticsName": {
      "type": "string",
      "metadata": {
        "description": "The name of the log analytics workspace used by the container app hosting environment"
      }
    },
    "appInsightsName": {
      "type": "string",
      "metadata": {
        "description": "The name of the app insights workspace used by Dapr-enabled container apps running in the hosting environment"
      }
    },
    "useExisting": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "When true, the details of an existing container app hosting environment will be returned; When false, the container app hosting environment will be created/updated"
      }
    },
    "existingAppEnvironmentResourceGroupName": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "The resource group in which the existing container app hosting environment resides"
      }
    },
    "existingAppEnvironmentSubscriptionId": {
      "type": "string",
      "defaultValue": "[subscription().subscriptionId]",
      "metadata": {
        "description": "The subscription in which the existing container app hosting environment resides"
      }
    },
    "existingAppInsightsResourceGroupName": {
      "type": "string",
      "defaultValue": "[parameters('existingAppEnvironmentResourceGroupName')]",
      "metadata": {
        "description": "The resource group in which the existing app insights workspace resides"
      }
    },
    "existingAppInsightsSubscriptionId": {
      "type": "string",
      "defaultValue": "[parameters('existingAppEnvironmentSubscriptionId')]",
      "metadata": {
        "description": "The subscription in which the existing app insights workspace resides"
      }
    },
    "createContainerRegistry": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "When true, an Azure Container Registry will be provisioned"
      }
    },
    "containerRegistryName": {
      "type": "string",
      "defaultValue": "[format('{0}acr', parameters('name'))]",
      "metadata": {
        "description": "The name of the container registry"
      }
    },
    "containerRegistrySku": {
      "type": "string",
      "defaultValue": "Standard",
      "metadata": {
        "description": "The SKU for the container registry"
      }
    },
    "enableContainerRegistryAdminUser": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "When true, admin access via the ACR key is enabled; When false, access is via RBAC"
      }
    },
    "resourceTags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "The resource tags applied to resources"
      }
    }
  },
  "resources": [
    {
      "condition": "[not(parameters('useExisting'))]",
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2021-06-01",
      "name": "[parameters('logAnalyticsName')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "name": "PerGB2018"
        },
        "retentionInDays": 30,
        "features": {
          "searchVersion": 1,
          "legacy": 0,
          "enableLogAccessUsingOnlyResourcePermissions": true
        }
      },
      "tags": "[parameters('resourceTags')]"
    },
    {
      "condition": "[not(parameters('useExisting'))]",
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[parameters('appInsightsName')]",
      "location": "[parameters('location')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "Flow_Type": "Redfield",
        "Request_Source": "CustomDeployment",
        "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsName'))]"
      },
      "tags": "[parameters('resourceTags')]",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsName'))]"
      ]
    },
    {
      "condition": "[not(parameters('useExisting'))]",
      "type": "Microsoft.App/managedEnvironments",
      "apiVersion": "2022-03-01",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "properties": {
        "appLogsConfiguration": {
          "destination": "log-analytics",
          "logAnalyticsConfiguration": {
            "customerId": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsName')), '2021-06-01').customerId]",
            "sharedKey": "[listKeys(resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsName')), '2021-06-01').primarySharedKey]"
          }
        },
        "daprAIInstrumentationKey": "[reference(resourceId('Microsoft.Insights/components', parameters('appInsightsName')), '2020-02-02').InstrumentationKey]",
        "daprAIConnectionString": "[reference(resourceId('Microsoft.Insights/components', parameters('appInsightsName')), '2020-02-02').ConnectionString]"
      },
      "tags": "[parameters('resourceTags')]",
      "dependsOn": [
        "[resourceId('Microsoft.Insights/components', parameters('appInsightsName'))]",
        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsName'))]"
      ]
    },
    {
      "condition": "[parameters('createContainerRegistry')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "appEnvAcrDeploy",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[parameters('containerRegistryName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "sku": {
            "value": "[parameters('containerRegistrySku')]"
          },
          "adminUserEnabled": {
            "value": "[parameters('enableContainerRegistryAdminUser')]"
          },
          "resourceTags": {
            "value": "[parameters('resourceTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.11.1.770",
              "templateHash": "14478868845436771878"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the container registry"
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location of the container registry"
              }
            },
            "sku": {
              "type": "string",
              "allowedValues": [
                "Basic",
                "Standard",
                "Premium"
              ],
              "metadata": {
                "description": "SKU for the container registry"
              }
            },
            "adminUserEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "When true, admin access via the ACR key is enabled; When false, access is via RBAC"
              }
            },
            "useExisting": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "When true, the details of an existing ACR will be returned; When false, the ACR is created/updated"
              }
            },
            "resourceTags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "The resource tags applied to resources"
              }
            }
          },
          "resources": [
            {
              "condition": "[not(parameters('useExisting'))]",
              "type": "Microsoft.ContainerRegistry/registries",
              "apiVersion": "2021-09-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "[parameters('sku')]"
              },
              "properties": {
                "adminUserEnabled": "[parameters('adminUserEnabled')]"
              },
              "tags": "[parameters('resourceTags')]"
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[if(parameters('useExisting'), resourceId('Microsoft.ContainerRegistry/registries', parameters('name')), resourceId('Microsoft.ContainerRegistry/registries', parameters('name')))]",
              "metadata": {
                "description": "The resource ID of the container registry"
              }
            },
            "name": {
              "type": "string",
              "value": "[if(parameters('useExisting'), parameters('name'), parameters('name'))]",
              "metadata": {
                "description": "The name of the container registry"
              }
            },
            "loginServer": {
              "type": "string",
              "value": "[if(parameters('useExisting'), reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('name')), '2021-09-01').loginServer, reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('name')), '2021-09-01').loginServer)]",
              "metadata": {
                "description": "The admin username of the container registry"
              }
            },
            "acrResource": {
              "type": "object",
              "value": "[if(parameters('useExisting'), reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('name')), '2021-09-01', 'full'), reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('name')), '2021-09-01', 'full'))]",
              "metadata": {
                "description": "An object representing the container registry resource"
              }
            }
          }
        }
      }
    }
  ],
  "outputs": {
    "id": {
      "type": "string",
      "value": "[if(parameters('useExisting'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('existingAppEnvironmentSubscriptionId'), parameters('existingAppEnvironmentResourceGroupName')), 'Microsoft.App/managedEnvironments', parameters('name')), resourceId('Microsoft.App/managedEnvironments', parameters('name')))]",
      "metadata": {
        "description": "The resource ID of the container app environment"
      }
    },
    "name": {
      "type": "string",
      "value": "[if(parameters('useExisting'), parameters('name'), parameters('name'))]",
      "metadata": {
        "description": "The name of the container app environment"
      }
    },
    "appEnvironmentResource": {
      "type": "object",
      "value": "[if(parameters('useExisting'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('existingAppEnvironmentSubscriptionId'), parameters('existingAppEnvironmentResourceGroupName')), 'Microsoft.App/managedEnvironments', parameters('name')), '2022-03-01', 'full'), reference(resourceId('Microsoft.App/managedEnvironments', parameters('name')), '2022-03-01', 'full'))]",
      "metadata": {
        "description": "An object representing the container app environment resource"
      }
    },
    "appinsights_instrumentation_key": {
      "type": "string",
      "value": "[if(parameters('useExisting'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('existingAppInsightsSubscriptionId'), parameters('existingAppInsightsResourceGroupName')), 'Microsoft.Insights/components', parameters('appInsightsName')), '2020-02-02').InstrumentationKey, reference(resourceId('Microsoft.Insights/components', parameters('appInsightsName')), '2020-02-02').InstrumentationKey)]",
      "metadata": {
        "description": "The app insights workspace instrumentation key"
      }
    },
    "acrId": {
      "type": "string",
      "value": "[if(parameters('createContainerRegistry'), reference(resourceId('Microsoft.Resources/deployments', 'appEnvAcrDeploy'), '2020-10-01').outputs.id.value, '')]",
      "metadata": {
        "description": "The resource ID of the container registry"
      }
    },
    "acrUsername": {
      "type": "string",
      "value": "[if(parameters('createContainerRegistry'), reference(resourceId('Microsoft.Resources/deployments', 'appEnvAcrDeploy'), '2020-10-01').outputs.name.value, '')]",
      "metadata": {
        "description": "The admin username for the container registry"
      }
    },
    "acrLoginServer": {
      "type": "string",
      "value": "[if(parameters('createContainerRegistry'), reference(resourceId('Microsoft.Resources/deployments', 'appEnvAcrDeploy'), '2020-10-01').outputs.loginServer.value, '')]",
      "metadata": {
        "description": "The login server for the container registry"
      }
    }
  }
}